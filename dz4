#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <Windows.h>
#define END 4000011
#define STEP1 200000
#define NUM 4
#define MAXN 100

long shell_sort(int* array, int size) {
    long t;
    t = GetTickCount64();
    for (int s = size / 2; s > 0; s /= 2) {
        for (int i = s; i < size; ++i) {
            for (int j = i - s; j >= 0 && array[j] < array[j + s]; j -= s) {
                int temp = array[j];
                array[j] = array[j + s];
                array[j + s] = temp;
            }
        }
    }
    t = GetTickCount64() - t;
    return t;
}

int main() {
    int k = 1;
    long result = 0;
    FILE* file;
    FILE* file1;
    FILE* file2;
    file = fopen("file.txt", "w");
    file1 = fopen("filenum.txt", "w");
    file2 = fopen("filetime.txt", "w");
    for (int i = 10; i < END; i += STEP1) {
        for (int j = MAXN; j < MAXN+NUM; j += 1) {
            int** A = (int**)malloc(i * sizeof(int*));
            for (int k = 0; k < i; k++) {
                A[k] = (int*)malloc(j * sizeof(int));
            }
            for (int k = 0; k < i; k++) {
                for (int l = 0; l < j; l++) {
                    A[k][l] = rand() % 2;
                }
            }
            int* mas;
            mas = (int*)malloc(i * sizeof(int));
            int sum = 0;
            for (int k = 0; k < i; k++) {
                for (int l = 0; l < j; l++) {
                    sum += A[k][l];
                }
                mas[k] = sum;
                sum = 0;
            }
            result = shell_sort(mas, i);
            printf("N = %d\n", i);
            for (int k = 0; k < i; k++) {
                if (mas[k] < mas[k + 1]) {
                    k = 0;
                    printf("Incorrectly");
                    break;
                }
            }
            free(mas);
            for (int k = 0; k < i ; k++) {
                free(A[k]);
            }
            free(A);
            if (k) {
                fprintf(file, "N = %d || Time = %ld\n", i, result);
                fprintf(file1, "%d\n", i);
                fprintf(file2, "%ld\n", result);
            }
            else
                fprintf(file, "-1 || N = %i\n", i);
        }
    }
    return 0;
}
